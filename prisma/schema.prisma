// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String
  phone      String
  password   String
  avatar     String?
  created_at DateTime  @map("created_at")
  updated_at DateTime? @map("updated_at")

  posts            Post[]
  estimateRequests EstimateRequest[]
  company          Company?

  @@map("users")
}

model EstimateRequest {
  id          String  @id @default(uuid())
  footage     Int
  name        String
  phone       String
  email       String
  description String

  user_id     String? @map("user_id")
  address_street String
  address_number String
  address_postal_code String
  address_neighborhood String
  address_state String
  address_city String
  latitude    Float
  longitude   Float


  user      User?                 @relation(fields: [user_id], references: [id])
  files     EstimateRequestFile[]
  proposals Proposal[]
  created_at DateTime  @map("created_at")
  updated_at DateTime? @map("updated_at")

  @@map("estimate_request")
}

model EstimateRequestFile {
  id                  String   @id @default(uuid())
  url                 String
  estimate_request_id String   @map("estimate_request_id")
  created_at DateTime  @map("created_at")
  updated_at DateTime? @map("updated_at")

  estimateRequest EstimateRequest @relation(fields: [estimate_request_id], references: [id])

  @@map("estimate_request_files")
}

model File {
  id         String   @id @default(uuid())
  name       String
  type       String
  created_at DateTime  @map("created_at")
  updated_at DateTime? @map("updated_at")

  postFiles PostFile[]

  @@map("files")
}

model Post {
  id         String    @id @default(uuid())
  title      String
  body       String   @db.Text
  user_id    String    @map("user_id")
  company_id String    @map("company_id")
  status     String
  created_at DateTime  @map("created_at")
  updated_at DateTime? @map("updated_at")

  user      User       @relation(fields: [user_id], references: [id])
  postFiles PostFile[]
  tags      Tag[]

  @@map("posts")
}
model TagPost {
  id         String    @id @default(uuid())
  tag_id String
  post_id String
  tag Tag @relation(fields: [tag_id], references: [id])

  @@map("tag_posts")
}
model Tag {
  id     String  @id @default(uuid())
  name   String
  post_id String @map("post_id")
  created_at DateTime  @map("created_at")
  updated_at DateTime? @map("updated_at")

  post Post @relation(fields: [post_id], references: [id])
  tags TagPost[]
  @@map("tags")
}


model PostFile {
  id      String  @id @default(uuid())
  post_id  String @map("post_id")
  file_id String @map("files_id")
  company_id String @map("company_id")

  post Post @relation(fields: [post_id], references: [id])
  file File @relation(fields: [file_id], references: [id])

  created_at DateTime  @map("created_at")
  updated_at DateTime? @map("updated_at")

  @@map("post_files")
}

model Proposal {
  id                  String    @id @default(uuid())
  name                String
  amount              Int
  description         String
  estimate_request_id String    @map("estimate_request_id")
  company_id          String    @map("company_id")
  created_at          DateTime  @map("created_at")
  updated_at          DateTime? @map("updated_at")
  approved_at         DateTime? @map("approved_at")
  reject_at           DateTime? @map("reject_at")

  estimateRequest EstimateRequest? @relation(fields: [estimate_request_id], references: [id])
  company         Company?         @relation(fields: [company_id], references: [id])
  job             Job?

  @@map("proposals")
}


model CompanyAddress {
  id         String    @id @default(uuid())
  name       String
  address    String
  city       String
  state      String
  country    String
  zip        String
  latitude   Float
  longitude  Float
  created_at DateTime  @map("created_at")
  updated_at DateTime? @map("updated_at")

  company Company?

  @@map("company_address")
}

model Company {
  id         String  @id @default(uuid())
  name       String
  avatar     String?
  ratting    Float   @default(0)
  about      String?
  owner_id   String  @unique @map("owner_id")
  address_id String  @unique

  owner     User       @relation(fields: [owner_id], references: [id])
  proposals Proposal[]
  jobs      Job[]
  services CompanyService[]

  address CompanyAddress @relation(fields: [address_id], references: [id])

  created_at DateTime  @map("created_at")
  updated_at DateTime? @map("updated_at")
  

  @@map("company")
}

model Job {
  id         String  @id @default(uuid())
  company_id String @map("company_id")
  proposal_id String @unique @map("proposal_id")

  company  Company  @relation(fields: [company_id], references: [id])
  proposal Proposal @relation(fields: [proposal_id], references: [id])
  created_at DateTime  @map("created_at")
  updated_at DateTime? @map("updated_at")

  @@map("jobs")
}

model CompanyService {
  id         String    @id @default(uuid())
  name String
  company_id String    
  category_id String   
  created_at DateTime  
  updated_at DateTime? 

  company  Company  @relation(fields: [company_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])

  @@map("company_services")
}
model Category {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime  @map("created_at")
  updated_at DateTime? @map("updated_at")
  companies CompanyService[]


  @@map("categories")
}
